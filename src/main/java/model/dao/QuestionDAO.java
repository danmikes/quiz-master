package model.dao;

import model.dao.AbstractDAO;
import model.entity.Course;
import model.entity.Question;
import model.entity.Quiz;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * Voegt nieuwe vraag toe
 * Wijzigt bestaande vraag
 * Haalt autogenerated nrVraag op
 * <p>
 * author Daniel Mikes - Team Fenix
 */
public class QuestionDAO extends AbstractDAO {

    // constructor(s)
    public QuestionDAO() {
        super(db);
    }

    //DAO of parent class
    private CourseDAO cdao = new CourseDAO();
    private QuizDAO qdao = new QuizDAO();

    // toon alle vragen van een quiz
    public List<Question> viewQuestions(Quiz quiz) {
        String sql = "Select nrVraag, tekstVraag, antwoordA, antwoordB, antwoordC, antwoordD\n" +
                "                from vraag v join Quiz q on v.idCursus = q.idCursus and v.nrQuiz = q.nrQuiz\n" +
                "                where naamQuiz = ? and q.nrQuiz = ?;";
        List<Question> result = new ArrayList<>();
        try {
            PreparedStatement ps = getStatement(sql);
            ps.setString(1, quiz.getNameQuiz());
            ps.setInt(2, quiz.getNrQuiz());
            ResultSet rs = executeSelectPreparedStatement(ps);
            while (rs.next()) {
                int nrQuestion = rs.getInt("nrVraag");
                String textQuestion = rs.getString("tekstVraag");
                String answerA = rs.getString("antwoordA");
                String answerB = rs.getString("antwoordB");
                String answerC = rs.getString("antwoordC");
                String answerD = rs.getString("antwoordD");
                Question question = new Question(quiz, nrQuestion, textQuestion, answerA, answerB, answerC, answerD);
                result.add(question);
                //  System.out.println(question); // test
            }
        } catch (SQLException e) {
            System.out.println("SQL error QuestionDAO.getQuestion select" + e.getMessage());
        }
        return result;
    }

    // selecteer vraag
    public Question selectQuestionByName(String selectedQuestion) {
        String sql = "Select nrVraag, tekstVraag, antwoordA, antwoordB, antwoordC, antwoordD where tekstVraag = ?;";
        Question result = null;
        try {
            PreparedStatement ps = getStatement(sql);
            ps.setString(1, selectedQuestion);
            ResultSet rs = executeSelectPreparedStatement(ps);
            while (rs.next()) {
                int nrQuestion = rs.getInt("nrVraag");
                String textQuestion = rs.getString("tekstVraag");
                String answerA = rs.getString("antwoordA");
                String answerB = rs.getString("antwoordB");
                String answerC = rs.getString("antwoordC");
                String answerD = rs.getString("antwoordD");
                result = new Question(nrQuestion, textQuestion, answerA, answerB, answerC, answerD);
            }
        } catch (SQLException e) {
            System.out.println("SQL error QuestionDAO selectQuestionByName: " + e.getMessage());
        }
        return result;
    }

    // maak vraag
    public void newQuestion(Question vraag) {
        String sql = "Insert ignore into Vraag(idCursus, nrQuiz, nrVraag, tekstVraag, " +
                "antwoordA, antwoordB, antwoordC, antwoordD) " +
                "select c.idCursus, ?, ?,?,?,?,?,? " +
                "from Quiz q join Cursus c on q.idCursus = c.idCursus " +
                "and naamCursus = ? and naamQuiz = ?";
        try {
            PreparedStatement ps = getStatement(sql);
            Quiz quiz = vraag.getQuiz();
            Course course = quiz.getCourse();
            ps.setInt(1, quiz.getNrQuiz());
            ps.setInt(2, vraag.getNrQuestion());
            ps.setString(3, vraag.getTextQuestion());
            ps.setString(4, vraag.getAnswerA());
            ps.setString(5, vraag.getAnswerB());
            ps.setString(6, vraag.getAnswerC());
            ps.setString(7, vraag.getAnswerD());
            ps.setString(8, course.getNameCourse());
            ps.setString(9, quiz.getNameQuiz());
            executeManipulatePreparedStatement(ps);
        } catch (SQLException e) {
            System.out.println("SQL error QuestionDAO.newQuestion: " + e.getMessage());
        }
    }

    // toon vragen uit specifieke quiz = viewQuestions
    public List<Question> selectAllQuestionsByNrQuiz(int quizNr) {
        String sql = "Select idCursus, nrQuiz, nrVraag, tekstVraag, antwoordA, antwoordB, antwoordC, antwoordD from Vraag where nrQuiz = ?;";
        List<Question> result = new ArrayList<>();
        try {
            PreparedStatement ps = getStatement(sql);
            //ps.setInt(1,quiz.getNrQuiz()); //gebruiken zodra keuze quiz in SelectQuizForStudent werkt
            ps.setInt(1,quizNr);// nu vaste waarde voor quiz ingevuld

            ResultSet rs = executeSelectPreparedStatement(ps);
            while (rs.next()) {
 //               int idCursus = rs.getInt("idCursus");
                int nrQuiz = rs.getInt("nrQuiz");
                int nrQuestion = rs.getInt("nrVraag");
                String textQuestion = rs.getString("tekstVraag");
                String answerA = rs.getString("antwoordA");
                String answerB = rs.getString("antwoordB");
                String answerC = rs.getString("antwoordC");
                String answerD = rs.getString("antwoordD");
                Quiz quiz = new QuizDAO().getQuizByNrQuiz(nrQuiz);
                Question question = new Question(quiz, nrQuestion, textQuestion, answerA, answerB, answerC, answerD);
                result.add(question);
            }
        } catch (SQLException e) {
            System.out.println("SQL error QuestionDAO selectAllQuestionsByNrQuiz: " + e.getMessage());
        }
        return result;
    }

    // toon vragen uit specifieke quiz = viewQuestions
    public List<Question> selectQuestionsByQuiz(Quiz quiz) {
        String sql = "Select idCursus, nrQuiz, nrVraag, tekstVraag, antwoordA, antwoordB, antwoordC, antwoordD from Vraag where nrQuiz = ?;";
        List<Question> result = new ArrayList<>();
        try {
            PreparedStatement ps = getStatement(sql);
            ps.setInt(1,quiz.getNrQuiz()); //gebruiken zodra keuze quiz in SelectQuizForStudent werkt
            //ps.setString(1, quiz.getNameQuiz());// nu vaste waarde voor quiz ingevuld

            ResultSet rs = executeSelectPreparedStatement(ps);
            while (rs.next()) {
                int idCursus = rs.getInt("idCursus");
                int nrQuiz = rs.getInt("nrQuiz");
                int nrQuestion = rs.getInt("nrVraag");
                String textQuestion = rs.getString("tekstVraag");
                String answerA = rs.getString("antwoordA");
                String answerB = rs.getString("antwoordB");
                String answerC = rs.getString("antwoordC");
                String answerD = rs.getString("antwoordD");
                Question question = new Question(quiz,nrQuestion,textQuestion,answerA,answerB,answerC,answerD);
                result.add(question);
            }
        } catch (SQLException e) {
            System.out.println("SQL error QuestionDAO selectQuestionsByQuiz: " + e.getMessage());
        }
        return result;
    }
}